cmake_minimum_required(VERSION 3.16)

project(cpp_pyqubo)

option(PYQUBO_BUILD_SHARED_LIBS "build mylib as a shared library" OFF)

if (APPLE)
    set(CMAKE_MACOSX_RPATH TRUE)
    set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -Wno-unused-command-line-argument")
    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS}  -Wno-unused-command-line-argument")
endif()


set(CXX_STANDARD_REQUIRED TRUE)
set(CMAKE_VERBOSE_MAKEFILE TRUE)

set(CMAKE_CXX_STANDARD 14)

set(DEFAULT_USE_OMP Yes)
# Use OpenMP as default behavior
if(NOT DEFINED USE_OMP)
    set(USE_OMP ${DEFAULT_USE_OMP})
endif()

if(NOT APPLE) 
  if(NOT DEFINED USE_OMP) 
    set(USE_OMP ${DEFAULT_USE_OMP})
  endif() 
else() 
  if(FORCE_USE_OMP) 
    set(USE_OMP ${DEFAULT_USE_OMP})
  endif()
endif()

if(USE_OMP)
    if(APPLE) 
      if(NOT CMAKE_OSX_ARCHITECTURES)
        message(STATUS "Apple Native Build")
	set(OpenMP_C_FLAGS "-Xpreprocessor -fopenmp")
	set(OpenMP_CXX_FLAGS "-Xpreprocessor -fopenmp")
        find_package(OpenMP REQUIRED)
	if(OpenMP_FOUND)
           message(STATUS "OMP_FOUND = YES")
	   set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} ${OpenMP_C_FLAGS}")
           set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} ${OpenMP_CXX_FLAGS}")
	   add_definitions(-DEIGEN_DONT_PARALLELIZE)
           add_definitions(-DUSE_OMP)
	endif()
      elseif(${CMAKE_OSX_ARCHITECTURES} STREQUAL "arm64")
        message(STATUS "APPLE SILICON")
	set(OpenMP_C_FLAGS "-Xpreprocessor -fopenmp")
	set(OpenMP_CXX_FLAGS "-Xpreprocessor -fopenmp")
        find_package(OpenMP REQUIRED)
	if(OpenMP_FOUND)
           message(STATUS "OMP_FOUND = YES")
	   set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} ${OpenMP_C_FLAGS}")
           set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} ${OpenMP_CXX_FLAGS}")
	   add_definitions(-DEIGEN_DONT_PARALLELIZE)
           add_definitions(-DUSE_OMP)
        else() 
          message(STATUS "OMP_FOUND = NO") 
	endif()
      else()
        message(STATUS "APPLE X86-64")
        find_package(OpenMP REQUIRED)
	if(OpenMP_FOUND)
           message(STATUS "OMP_FOUND = YES")
	   set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} ${OpenMP_C_FLAGS}")
           set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} ${OpenMP_CXX_FLAGS}")
	   add_definitions(-DEIGEN_DONT_PARALLELIZE)
           add_definitions(-DUSE_OMP)
	endif()
      endif()
    else()
      find_package(OpenMP REQUIRED)
      if(OpenMP_FOUND)
        message(STATUS "OMP_FOUND = YES")
	set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} ${OpenMP_C_FLAGS}")
        set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} ${OpenMP_CXX_FLAGS}")
	add_definitions(-DEIGEN_DONT_PARALLELIZE)
        add_definitions(-DUSE_OMP)
      endif()
    endif()
else() 
  if(APPLE) 
      if(NOT CMAKE_OSX_ARCHITECTURES)
        message(STATUS "APPLE Native Build")
	set(OpenMP_C_FLAGS "-Xpreprocessor -fopenmp")
	set(OpenMP_CXX_FLAGS "-Xpreprocessor -fopenmp")
        find_package(OpenMP)
	if(OpenMP_FOUND)
           set(USE_OMP ${DEFAULT_USE_OMP})
           message(STATUS "OMP_FOUND = YES")
	   set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} ${OpenMP_C_FLAGS}")
           set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} ${OpenMP_CXX_FLAGS}")
	   add_definitions(-DEIGEN_DONT_PARALLELIZE)
           add_definitions(-DUSE_OMP)
	else() 
          message(STATUS "OMP_FOUND = NO") 
	endif()
      elseif(${CMAKE_OSX_ARCHITECTURES} STREQUAL "arm64")
        message(STATUS "APPLE SILICON")
	set(OpenMP_C_FLAGS "-Xpreprocessor -fopenmp")
	set(OpenMP_CXX_FLAGS "-Xpreprocessor -fopenmp")
        find_package(OpenMP)
	if(OpenMP_FOUND)
           set(USE_OMP ${DEFAULT_USE_OMP})
           message(STATUS "OMP_FOUND = YES")
	   set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} ${OpenMP_C_FLAGS}")
           set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} ${OpenMP_CXX_FLAGS}")
	   add_definitions(-DEIGEN_DONT_PARALLELIZE)
           add_definitions(-DUSE_OMP)
        else() 
          message(STATUS "OMP_FOUND = NO") 
	endif()
      else()
        message(STATUS "APPLE X86-64")
        find_package(OpenMP)
	if(OpenMP_FOUND)
           set(USE_OMP ${DEFAULT_USE_OMP})
           message(STATUS "OMP_FOUND = YES")
	   set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} ${OpenMP_C_FLAGS}")
           set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} ${OpenMP_CXX_FLAGS}")
	   add_definitions(-DEIGEN_DONT_PARALLELIZE)
           add_definitions(-DUSE_OMP)
	else() 
          message(STATUS "OMP_FOUND = NO") 
	endif()
      endif()
  endif()
endif()

message(STATUS "USE_OMP = ${USE_OMP}")
message(STATUS "USE_CUDA = ${USE_CUDA}")
message(STATUS "USE_TEST = ${USE_TEST}")

if (APPLE)
    find_package(BLAS)
    find_package(LAPACK)
endif()

include(external/pybind11.cmake)

find_package(Python COMPONENTS Development.Module)
add_subdirectory(src)



include(external/googletest.cmake)
add_subdirectory(tests)
