version: 2.1

orbs:
  win: circleci/windows@2.2.0

jobs:

  test-linux-36:
    docker:
      - image: quay.io/pypa/manylinux1_x86_64
    environment:
      PYENV_ROOT: tmp/.pyenv
      PYTHON: 3.6.5
      
    working_directory: ~/repo

    steps:

      - checkout

      - restore_cache:
          keys:
            - v1-pyenv-{{ .Environment.CIRCLE_JOB }}-linux
      
      - run: &install-python-template
          name: install python from pyenv
          command: |
            echo 'export PATH=$PYENV_ROOT/bin:$PATH' >> $BASH_ENV
            source $BASH_ENV
            git clone https://github.com/pyenv/pyenv.git $PYENV_ROOT
            eval "$(pyenv init -)" 
            pyenv install $PYTHON -s
      
      - save_cache:
          paths:
            - tmp/.pyenv
          key: v1-pyenv-{{ .Environment.CIRCLE_JOB }}-linux
      
      - run: &create-virtualenv-template
          name: create virtualenv
          command: |
            eval "$(pyenv init -)"
            pyenv local $PYTHON
            python --version
            python -m pip install virtualenv
            python -m virtualenv env
      
      - restore_cache:
          keys:
          - v2-dependencies-{{ checksum "requirements.txt" }}-{{ .Environment.CIRCLE_JOB }}

      - run: &install-dependencies-template
          name: install dependencies
          command: |
            . env/bin/activate 
            python --version
            pip install -r requirements.txt
      
      - save_cache:
          paths:
            - ./env
          key: v2-dependencies-{{ checksum "requirements.txt" }}-{{ .Environment.CIRCLE_JOB }}
  
      - run: &install-package-template
          name: install package
          command: |
            . env/bin/activate
            python --version
            python setup.py install

      - run: &run-tests-template
          name: run unittests
          command: |
            . env/bin/activate
            python --version
            coverage run -m unittest discover
  
  test-linux-python36-old: &linux-test-template
    docker:
      - image: rikorose/gcc-cmake
    environment:
      PYENV_ROOT: tmp/.pyenv
      PYTHON: 3.6.5
      
    working_directory: ~/repo

    steps:

      - checkout

      - restore_cache:
          keys:
            - v1-pyenv-{{ .Environment.CIRCLE_JOB }}-linux
      
      - run: &install-python-template
          name: install python from pyenv
          command: |
            echo 'export PATH=$PYENV_ROOT/bin:$PATH' >> $BASH_ENV
            source $BASH_ENV
            git clone https://github.com/pyenv/pyenv.git $PYENV_ROOT
            eval "$(pyenv init -)" 
            pyenv install $PYTHON -s
      
      - save_cache:
          paths:
            - tmp/.pyenv
          key: v1-pyenv-{{ .Environment.CIRCLE_JOB }}-linux
      
      - run: &create-virtualenv-template
          name: create virtualenv
          command: |
            eval "$(pyenv init -)"
            pyenv local $PYTHON
            python --version
            python -m pip install virtualenv
            python -m virtualenv env
      
      - restore_cache:
          keys:
          - v2-dependencies-{{ checksum "requirements.txt" }}-{{ .Environment.CIRCLE_JOB }}

      - run: &install-dependencies-template
          name: install dependencies
          command: |
            . env/bin/activate 
            python --version
            pip install -r requirements.txt
      
      - save_cache:
          paths:
            - ./env
          key: v2-dependencies-{{ checksum "requirements.txt" }}-{{ .Environment.CIRCLE_JOB }}
  
      - run: &install-package-template
          name: install package
          command: |
            . env/bin/activate
            python --version
            python setup.py install

      - run: &run-tests-template
          name: run unittests
          command: |
            . env/bin/activate
            python --version
            coverage run -m unittest discover
  
  test-linux-python35:
    <<: *linux-test-template
    environment:
      PYENV_ROOT: tmp/.pyenv
      PYTHON: 3.5.5
  
  test-linux-python37:
    <<: *linux-test-template
    environment:
      PYENV_ROOT: tmp/.pyenv
      PYTHON: 3.7.5
  
  test-linux-python38:
    <<: *linux-test-template
    environment:
      PYENV_ROOT: tmp/.pyenv
      PYTHON: 3.8.0
  
  deploy-linux:
    docker:
      - image: rikorose/gcc-cmake
    environment:
      PYENV_ROOT: tmp/.pyenv
      PYTHON: 3.6.5
      
    working_directory: ~/repo

    steps:

      - checkout    

      - restore_cache:
          keys:
            - v1-pyenv-{{ .Environment.CIRCLE_JOB }}-linux
      
      - run: *install-python-template
      
      - save_cache:
          paths:
            - tmp/.pyenv
          key: v1-pyenv-{{ .Environment.CIRCLE_JOB }}-linux
      
      - run: *create-virtualenv-template
      
      - restore_cache:
          keys:
          - v2-dependencies-{{ checksum "requirements.txt" }}-{{ .Environment.CIRCLE_JOB }}

      - run: *install-dependencies-template
      
      - save_cache:
          paths:
            - ./env
          key: v2-dependencies-{{ checksum "requirements.txt" }}-{{ .Environment.CIRCLE_JOB }}
  
      - run: *install-package-template
      
      - run:
          name: build wheels
          command: |
            . env/bin/activate
            python -m pip install cibuildwheel==1.5.1 twine
            python -m cibuildwheel --output-dir wheelhouse
            #python setup.py sdist -d ./dist
      
      - store_artifacts:
          path: ./dist

      - run:
          name: init .pypirc
          command: |
            echo -e "[pypi]" >> ~/.pypirc
            # for testpypi
            echo -e "repository = https://test.pypi.org/legacy/" >> ~/.pypirc
            echo -e "password = $TEST_PYPI_PASSWORD" >> ~/.pypirc

            echo -e "username = $PYPI_USERNAME" >> ~/.pypirc
            #echo -e "password = $PYPI_PASSWORD" >> ~/.pypirc
      
      - run:
          name: install twine and deploy
          command: |
            . env/bin/activate
            pip install twine
            twine upload wheelhouse/*.whl
  
  test-osx:
    macos:
      xcode: "11.2.1"
    environment:
      PYTHON: 3.6.5
      HOMEBREW_NO_AUTO_UPDATE: 1
    
    working_directory: ~/repo

    steps:
      - checkout

      - run:
          name: check brew
          command: |
            brew --version
            brew install cmake

      - run:
          name: install pyenv
          command: |
            brew install pyenv

      - restore_cache:
          keys:
            - pyenv-{{ .Environment.CIRCLE_JOB }}-xcode11.2.1

      - run:
          name: install python
          command: |
            pyenv install $PYTHON -s

      - save_cache:
          paths:
            - ~/.pyenv
          key: pyenv-{{ .Environment.CIRCLE_JOB }}-xcode11.2.1
      
      - run:
          name: create virtualenv
          command: |
            eval "$(pyenv init -)"
            pyenv local $PYTHON
            python -m pip install virtualenv
            python -m virtualenv env
      
      - restore_cache:
          keys:
          - v1-dependencies-{{ checksum "requirements.txt" }}-{{ .Environment.CIRCLE_JOB }}

      - run: *install-dependencies-template

      - save_cache:
          paths:
            - ./env
          key: v1-dependencies-{{ checksum "requirements.txt" }}-{{ .Environment.CIRCLE_JOB }}

      - run: *install-package-template

      - run: *run-tests-template

  build-win:
    executor:
      name: win/default
    
    environment:
      PYTHON: 3.6.5

    steps:
      - checkout

      - run:
          command: |
            choco install -y cmake
          shell: bash.exe  
      
      - run:
          command: |
            export PATH=$PATH:"C:\Program Files\CMake\bin"
            pip install -r requirements.txt
            python setup.py install
            
          shell: bash.exe
      

workflows:
  version: 2
  build-test:
    jobs:
      #- test-osx-3.6
      - deploy-linux
      #- deploy-linux
      #- build-win