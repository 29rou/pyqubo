name: Build&Upload

on:
  workflow_dispatch:
  pull_request:
  release:
    types:
      - released

env:
  Python_Version: 3.9

jobs:
  build_sdist:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-python@v2
        name: Install Python
        with:
          python-version: ${{env.Python_Version}}
      - name: Build sdist
        run: |
          pip install -r requirements.txt
          python setup.py sdist
      - uses: actions/upload-artifact@v2
        with:
          name: artifact
          path: dist/*.tar.gz
          retention-days: 1
          
  build_wheels:
    name: Build wheels on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    env:
      CIBW_DEPENDENCY_VERSIONS: latest
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        CIBW_ARCHS: [x86_64, AMD64, aarch64, i686, arm64, universal2]
        exclude:
         - os: ubuntu-latest
           CIBW_ARCHS: AMD64
         - os: ubuntu-latest
           CIBW_ARCHS: arm64
         - os: ubuntu-latest
           CIBW_ARCHS: universal2
           
         - os: macos-latest
           CIBW_ARCHS: AMD64
         - os: macos-latest
           CIBW_ARCHS: aarch64
         
         - os: windows-latest
           CIBW_ARCHS: x86_64
         - os: windows-latest
           CIBW_ARCHS: aarch64
         - os: windows-latest
           CIBW_ARCHS: i686
         - os: windows-latest
           CIBW_ARCHS: universal2
           
        include:
         - os: ubuntu-latest
           CIBW_PLATFORM: linux
           CIBW_BUILD: "{cp,pp}3*-manylinux*"
           CIBW_ENVIRONMENT:
              CFLAGS="-flto -Ofast -pipe"
              CXXFLAGS="-flto -Ofast -pipe"
              
         - os: macos-latest
           CIBW_PLATFORM: macos
           CIBW_BUILD: "{cp,pp}3*-macosx*"
           CIBW_BEFORE_ALL: "brew install libomp"
           CIBW_REPAIR_WHEEL_COMMAND: "delocate-listdeps --all --depending {wheel} && delocate-wheel --require-archs {delocate_archs} -w {dest_dir} -v {wheel}"
           CIBW_ENVIRONMENT:
              CPPFLAGS="$CPPFLAGS -flto -Xpreprocessor -fopenmp"
              CFLAGS="-flto -Ofast -pipe -I/usr/local/opt/libomp/include -lcblas -lclapack -framework Accelerate -framework OpenCL"
              CXXFLAGS="-flto -Ofast -pipe -I/usr/local/opt/libomp/include -lcblas -lclapack -framework Accelerate -framework OpenCL"
              LDFLAGS="$LDFLAGS -Wl,-rpath,/usr/local/opt/libomp/lib -L/usr/local/opt/libomp/lib -lomp"
              
         - os: windows-latest
           CIBW_PLATFORM: windows
           CIBW_BUILD: "{cp,pp}3*-win_amd64"
           CIBW_BEFORE_BUILD: "pip install delvewheel"
           CIBW_REPAIR_WHEEL_COMMAND: "delvewheel repair -w {dest_dir} {wheel}"
           CIBW_ENVIRONMENT:
              CFLAGS="-flto -Ofast -pipe"
              CXXFLAGS="-flto -Ofast -pipe"
           
      fail-fast: false 
      max-parallel: 3
    
    steps:
      - uses: actions/checkout@v2
      - name: Set up QEMU
        if: runner.os == 'Linux' && ${{matrix.CIBW_ARCHS}} == 'aarch64'
        uses: docker/setup-qemu-action@v1
        with:
          platforms: all
      - name: Build wheels
        uses: pypa/cibuildwheel@v1.12.0
        env:
          CIBW_PLATFORM:  ${{ matrix.CIBW_PLATFORM }}
          CIBW_BUILD: ${{ matrix.CIBW_BUILD}}
          CIBW_ENVIRONMENT: ${{env.CIBW_ENVIRONMENT}}
          CIBW_ARCHS: ${{env.CIBW_ARCHS}}
          CIBW_DEPENDENCY_VERSIONS: ${{ matrix.CIBW_DEPENDENCY_VERSIONS }}
          CIBW_BEFORE_BUILD: $${{matrix.CIBW_BEFORE_BUILD}}        
          CIBW_BEFORE_ALL: $${{matrix.CIBW_BEFORE_ALL}}
          CIBW_REPAIR_WHEEL_COMMAND: $${{matrix.CIBW_REPAIR_WHEEL_COMMAND}}

      - uses: actions/upload-artifact@v2
        with:
          name: artifact
          path: ./wheelhouse/*.whl
          retention-days: 1
          
  upload_pypi:
    needs: [build_wheels, build_sdist]
    runs-on: ubuntu-latest
    if: github.event_name == 'release'
    steps:
      - uses: actions/download-artifact@v2
        with:
          name: artifact
          path: dist
      - uses: pypa/gh-action-pypi-publish@release/v1
        with:
          user: ${{ secrets.PYPI_USERNAME }}
          password: ${{ secrets.PYPI_PASSWORD }}
